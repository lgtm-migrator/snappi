// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io/ioutil"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
)

type metricsController struct {
	handler interfaces.MetricsHandler
}

func NewHttpMetricsController(handler interfaces.MetricsHandler) interfaces.MetricsController {
	return &metricsController{handler}
}

func (ctrl *metricsController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/results/metrics", Method: "POST", Name: "GetMetrics", Handler: ctrl.GetMetrics},
	}
}

/*
GetMetrics: POST /results/metrics
Description:
*/
func (ctrl *metricsController) GetMetrics(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.MetricsRequest
	if r.Body != nil {
		body, readError := ioutil.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewMetricsRequest()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseGetMetrics400(w, err)
				return
			}
		} else {
			ctrl.responseGetMetrics400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseGetMetrics400(w, bodyError)
		return
	}
	result := ctrl.handler.GetMetrics(item, r)
	if result.HasStatusCode200() {
		httpapi.WriteJSONResponse(w, 200, result.StatusCode200())
		return
	}
	if result.HasStatusCode400() {
		httpapi.WriteJSONResponse(w, 400, result.StatusCode400())
		return
	}
	if result.HasStatusCode500() {
		httpapi.WriteJSONResponse(w, 500, result.StatusCode500())
		return
	}
	httpapi.WriteDefaultResponse(w, http.StatusInternalServerError)
}

func (ctrl *metricsController) responseGetMetrics400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewGetMetricsResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	httpapi.WriteJSONResponse(w, 400, result.StatusCode500())
}

func (ctrl *metricsController) responseGetMetrics500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewGetMetricsResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	httpapi.WriteJSONResponse(w, 500, result.StatusCode500())
}
