// This file is autogenerated. Do not modify
package controllers

import (
	"io/ioutil"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
)

type controlController struct {
	handler interfaces.ControlHandler
}

func NewHttpControlController(handler interfaces.ControlHandler) interfaces.ControlController {
	return &controlController{handler}
}

func (ctrl *controlController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/control/transmit", Method: "POST", Name: "SetTransmitState", Handler: ctrl.SetTransmitState},
		{Path: "/control/link", Method: "POST", Name: "SetLinkState", Handler: ctrl.SetLinkState},
		{Path: "/control/capture", Method: "POST", Name: "SetCaptureState", Handler: ctrl.SetCaptureState},
		{Path: "/control/flows", Method: "POST", Name: "UpdateFlows", Handler: ctrl.UpdateFlows},
		{Path: "/control/routes", Method: "POST", Name: "SetRouteState", Handler: ctrl.SetRouteState},
		{Path: "/control/ping", Method: "POST", Name: "SendPing", Handler: ctrl.SendPing},
		{Path: "/control/protocols", Method: "POST", Name: "SetProtocolState", Handler: ctrl.SetProtocolState},
	}
}

/*
SetTransmitState: POST /control/transmit
Description: Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetTransmitState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.TransmitState
	if r.Body != nil {
		body, _ := ioutil.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewTransmitState()
			err := item.FromJson(string(body))
			if err != nil {
				item = nil
			}
		}
	}
	result := ctrl.handler.SetTransmitState(item, r)
	if result.HasStatusCode200() {
		httpapi.WriteAnyResponse(w, 200, result.StatusCode200())
		return
	}
	if result.HasStatusCode400() {
		httpapi.WriteAnyResponse(w, 400, result.StatusCode400())
		return
	}
	if result.HasStatusCode500() {
		httpapi.WriteAnyResponse(w, 500, result.StatusCode500())
		return
	}
	httpapi.WriteDefaultResponse(w, http.StatusInternalServerError)
}

/*
SetLinkState: POST /control/link
Description: Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetLinkState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.LinkState
	if r.Body != nil {
		body, _ := ioutil.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewLinkState()
			err := item.FromJson(string(body))
			if err != nil {
				item = nil
			}
		}
	}
	result := ctrl.handler.SetLinkState(item, r)
	if result.HasStatusCode200() {
		httpapi.WriteAnyResponse(w, 200, result.StatusCode200())
		return
	}
	if result.HasStatusCode400() {
		httpapi.WriteAnyResponse(w, 400, result.StatusCode400())
		return
	}
	if result.HasStatusCode500() {
		httpapi.WriteAnyResponse(w, 500, result.StatusCode500())
		return
	}
	httpapi.WriteDefaultResponse(w, http.StatusInternalServerError)
}

/*
SetCaptureState: POST /control/capture
Description: Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetCaptureState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.CaptureState
	if r.Body != nil {
		body, _ := ioutil.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewCaptureState()
			err := item.FromJson(string(body))
			if err != nil {
				item = nil
			}
		}
	}
	result := ctrl.handler.SetCaptureState(item, r)
	if result.HasStatusCode200() {
		httpapi.WriteAnyResponse(w, 200, result.StatusCode200())
		return
	}
	if result.HasStatusCode400() {
		httpapi.WriteAnyResponse(w, 400, result.StatusCode400())
		return
	}
	if result.HasStatusCode500() {
		httpapi.WriteAnyResponse(w, 500, result.StatusCode500())
		return
	}
	httpapi.WriteDefaultResponse(w, http.StatusInternalServerError)
}

/*
UpdateFlows: POST /control/flows
Description: Updates flow properties without disruption of transmit state.
*/
func (ctrl *controlController) UpdateFlows(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.FlowsUpdate
	if r.Body != nil {
		body, _ := ioutil.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewFlowsUpdate()
			err := item.FromJson(string(body))
			if err != nil {
				item = nil
			}
		}
	}
	result := ctrl.handler.UpdateFlows(item, r)
	if result.HasStatusCode200() {
		httpapi.WriteJSONResponse(w, 200, result.StatusCode200())
		return
	}
	if result.HasStatusCode400() {
		httpapi.WriteAnyResponse(w, 400, result.StatusCode400())
		return
	}
	if result.HasStatusCode500() {
		httpapi.WriteAnyResponse(w, 500, result.StatusCode500())
		return
	}
	httpapi.WriteDefaultResponse(w, http.StatusInternalServerError)
}

/*
SetRouteState: POST /control/routes
Description: Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetRouteState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.RouteState
	if r.Body != nil {
		body, _ := ioutil.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewRouteState()
			err := item.FromJson(string(body))
			if err != nil {
				item = nil
			}
		}
	}
	result := ctrl.handler.SetRouteState(item, r)
	if result.HasStatusCode200() {
		httpapi.WriteAnyResponse(w, 200, result.StatusCode200())
		return
	}
	if result.HasStatusCode400() {
		httpapi.WriteAnyResponse(w, 400, result.StatusCode400())
		return
	}
	if result.HasStatusCode500() {
		httpapi.WriteAnyResponse(w, 500, result.StatusCode500())
		return
	}
	httpapi.WriteDefaultResponse(w, http.StatusInternalServerError)
}

/*
SendPing: POST /control/ping
Description: API to send an IPv4 and/or IPv6 ICMP Echo Request(s) between endpoints. For each endpoint 1 ping packet will be sent and API shall wait for ping response to either be successful or timeout. The API wait timeout for each request is 300ms.
*/
func (ctrl *controlController) SendPing(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.PingRequest
	if r.Body != nil {
		body, _ := ioutil.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewPingRequest()
			err := item.FromJson(string(body))
			if err != nil {
				item = nil
			}
		}
	}
	result := ctrl.handler.SendPing(item, r)
	if result.HasStatusCode200() {
		httpapi.WriteJSONResponse(w, 200, result.StatusCode200())
		return
	}
	if result.HasStatusCode400() {
		httpapi.WriteAnyResponse(w, 400, result.StatusCode400())
		return
	}
	if result.HasStatusCode500() {
		httpapi.WriteAnyResponse(w, 500, result.StatusCode500())
		return
	}
	httpapi.WriteDefaultResponse(w, http.StatusInternalServerError)
}

/*
SetProtocolState: POST /control/protocols
Description: Sets all configured protocols to `start` or `stop` state.
*/
func (ctrl *controlController) SetProtocolState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ProtocolState
	if r.Body != nil {
		body, _ := ioutil.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewProtocolState()
			err := item.FromJson(string(body))
			if err != nil {
				item = nil
			}
		}
	}
	result := ctrl.handler.SetProtocolState(item, r)
	if result.HasStatusCode200() {
		httpapi.WriteAnyResponse(w, 200, result.StatusCode200())
		return
	}
	if result.HasStatusCode400() {
		httpapi.WriteAnyResponse(w, 400, result.StatusCode400())
		return
	}
	if result.HasStatusCode500() {
		httpapi.WriteAnyResponse(w, 500, result.StatusCode500())
		return
	}
	httpapi.WriteDefaultResponse(w, http.StatusInternalServerError)
}
